import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  FormControlLabel,
  Switch,
  Box,
  Typography,
  Alert,
  InputAdornment,
  Paper,
  Grid2,
} from '@mui/material';
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ª–æ–∫–∞–ª—å–Ω–æ

// –ü–æ–¥—É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä–µ–π–¥–∞
interface PerformanceLevel {
  completionPercentage: number; // 70, 80, 90, 100, 110, 120
  requiredRevenue: number; // –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ %
  bonusPercentage: number; // –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏–∏
  bonus: number; // –°—É–º–º–∞ –ø—Ä–µ–º–∏–∏ –≤ —Ä—É–±–ª—è—Ö
  salary: number; // –û–∫–ª–∞–¥
  totalSalary: number; // –û–±—â–∞—è –ó–ü
}

interface Grade {
  id: string;
  name: string;
  description?: string;
  plan: number;
  minRevenue: number;
  maxRevenue: number;
  performanceLevels: PerformanceLevel[]; // –ú–∞—Å—Å–∏–≤ –ø–æ–¥—É—Ä–æ–≤–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  color: string;
  order: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  _count?: {
    participants: number;
  };
  participantPercentage?: number;
}

interface CreateGradeDto {
  name: string;
  description?: string;
  plan: number;
  minRevenue: number;
  maxRevenue: number;
  performanceLevels: PerformanceLevel[];
  color?: string;
  order?: number;
}

interface UpdateGradeDto extends Partial<CreateGradeDto> {
  isActive?: boolean;
}

interface GradeFormProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (data: CreateGradeDto | UpdateGradeDto) => Promise<void>;
  grade?: Grade | null;
  loading?: boolean;
}

const GradeForm: React.FC<GradeFormProps> = ({
  open,
  onClose,
  onSubmit,
  grade,
  loading = false,
}) => {
  // –ü–æ–¥—É—Ä–æ–≤–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
  const getDefaultPerformanceLevels = (plan: number): PerformanceLevel[] => [
    { 
      completionPercentage: 70, 
      requiredRevenue: Math.round(plan * 0.70), 
      bonusPercentage: 5.14, 
      bonus: 64800, 
      salary: 15000, 
      totalSalary: 79800 
    },
    { 
      completionPercentage: 80, 
      requiredRevenue: Math.round(plan * 0.80), 
      bonusPercentage: 5.63, 
      bonus: 87000, 
      salary: 21000, 
      totalSalary: 108000 
    },
    { 
      completionPercentage: 90, 
      requiredRevenue: Math.round(plan * 0.90), 
      bonusPercentage: 6.00, 
      bonus: 97200, 
      salary: 27000, 
      totalSalary: 124200 
    },
    { 
      completionPercentage: 100, 
      requiredRevenue: plan, 
      bonusPercentage: 6.00, 
      bonus: 108000, 
      salary: 27000, 
      totalSalary: 135000 
    },
    { 
      completionPercentage: 110, 
      requiredRevenue: Math.round(plan * 1.10), 
      bonusPercentage: 6.27, 
      bonus: 124200, 
      salary: 27000, 
      totalSalary: 151200 
    },
    { 
      completionPercentage: 120, 
      requiredRevenue: Math.round(plan * 1.20), 
      bonusPercentage: 6.50, 
      bonus: 140400, 
      salary: 27000, 
      totalSalary: 167400 
    }
  ];

  const [formData, setFormData] = useState<CreateGradeDto & { isActive?: boolean }>({
    name: '',
    description: '',
    plan: 1260000,
    minRevenue: 1000000,
    maxRevenue: 1400000, // –û–∫—Ä—É–≥–ª–∏–ª –¥–æ —Ä–æ–≤–Ω–æ–≥–æ —á–∏—Å–ª–∞
    performanceLevels: getDefaultPerformanceLevels(1260000),
    color: '#006657',
    order: 0,
    isActive: true,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
  const updatePerformanceLevel = (index: number, field: keyof PerformanceLevel, value: number) => {
    setFormData(prev => {
      const newLevels = [...prev.performanceLevels];
      newLevels[index] = { ...newLevels[index], [field]: value };
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º totalSalary –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ bonus –∏–ª–∏ salary
      if (field === 'bonus' || field === 'salary') {
        newLevels[index].totalSalary = newLevels[index].bonus + newLevels[index].salary;
      }
      
      return { ...prev, performanceLevels: newLevels };
    });
  };

  useEffect(() => {
    if (grade) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—É—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (–æ—Ç 70% –¥–æ 120%)
      let performanceLevels = grade.performanceLevels || getDefaultPerformanceLevels(grade.plan);
      
      // –ï—Å–ª–∏ –ø–æ–¥—É—Ä–æ–≤–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–µ —Å 70%, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
      if (performanceLevels.length === 0 || performanceLevels[0].completionPercentage !== 70) {
        performanceLevels = getDefaultPerformanceLevels(grade.plan);
      }
      
      setFormData({
        name: grade.name,
        description: grade.description || '',
        plan: grade.plan,
        minRevenue: grade.minRevenue,
        maxRevenue: grade.maxRevenue,
        performanceLevels,
        color: grade.color,
        order: grade.order,
        isActive: grade.isActive,
      });
    } else {
      setFormData({
        name: '',
        description: '',
        plan: 1260000,
        minRevenue: 1000000,
        maxRevenue: 1400000,
        performanceLevels: getDefaultPerformanceLevels(1260000),
        color: '#006657',
        order: 0,
        isActive: true,
      });
    }
    setErrors({});
  }, [grade, open]);

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (formData.plan <= 0) {
      newErrors.plan = '–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    if (formData.minRevenue < 0) {
      newErrors.minRevenue = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π';
    }
    if (formData.maxRevenue <= 0) {
      newErrors.maxRevenue = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }
    if (formData.maxRevenue <= formData.minRevenue) {
      newErrors.maxRevenue = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (formData.performanceLevels.length === 0) {
      newErrors.performanceLevels = '–ù–µ–æ–±—Ö–æ–¥–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await onSubmit(formData);
      onClose();
    } catch (error) {
      console.error('Error submitting form:', error);
    }
  };

  const handleChange = (field: keyof typeof formData) => (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = e.target.type === 'number' ? parseFloat(e.target.value) || 0 : e.target.value;
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const formatNumber = (num: number): string => {
    return new Intl.NumberFormat('ru-RU').format(num);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {grade ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–µ–π–¥' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä–µ–π–¥'}
      </DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent>
          <Grid2 container spacing={3}>
            <Grid2 size={{ xs: 12, md: 6 }}>
              <TextField
                fullWidth
                label="–ù–∞–∑–≤–∞–Ω–∏–µ"
                value={formData.name}
                onChange={handleChange('name')}
                error={!!errors.name}
                helperText={errors.name}
                required
              />
            </Grid2>
            <Grid2 size={{ xs: 12, md: 6 }}>
              <TextField
                fullWidth
                label="–û–ø–∏—Å–∞–Ω–∏–µ"
                value={formData.description}
                onChange={handleChange('description')}
                multiline
                rows={2}
              />
            </Grid2>
            
            <Grid2 size={{ xs: 12 }}>
              <TextField
                fullWidth
                label="–ü–ª–∞–Ω"
                type="number"
                value={formData.plan}
                onChange={handleChange('plan')}
                error={!!errors.plan}
                helperText={errors.plan}
                InputProps={{
                  endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                }}
                required
                sx={{ mb: 3 }}
              />
            </Grid2>

            <Grid2 size={{ xs: 12 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Box>
                  <Typography variant="h6" color="primary" gutterBottom>
                    üìà –ü–æ–¥—É—Ä–æ–≤–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–º–∏–∏ –∏ –æ–∫–ª–∞–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                  </Typography>
                </Box>
                <Button
                  variant="outlined"
                  size="small"
                  onClick={() => {
                    setFormData(prev => ({
                      ...prev,
                      performanceLevels: getDefaultPerformanceLevels(prev.plan)
                    }));
                  }}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å –∫ 70-120%
                </Button>
              </Box>
              
              {formData.performanceLevels.map((level, index) => (
                <Paper 
                  key={index}
                  sx={{ 
                    p: 2, 
                    mb: 2, 
                    border: '1px solid',
                    borderColor: 'divider',
                    borderRadius: 2
                  }}
                >
                  <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                    üèÜ {level.completionPercentage}% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                  </Typography>
                  
                  <Grid2 container spacing={2}>
                    <Grid2 size=\{\{ xs: {12, md: 2.4}}\}>
                      <TextField
                        fullWidth
                        label="–í—ã—Ä—É—á–∫–∞"
                        type="number"
                        value={level.requiredRevenue}
                        onChange={(e) => updatePerformanceLevel(index, 'requiredRevenue', parseFloat(e.target.value) || 0)}
                        InputProps={{
                          endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                        }}
                        size="small"
                      />
                    </Grid2>
                    
                    <Grid2 size=\{\{ xs: {12, md: 2.4}}\}>
                      <TextField
                        fullWidth
                        label="% –ü—Ä–µ–º–∏–∏"
                        type="number"
                        value={level.bonusPercentage}
                        onChange={(e) => updatePerformanceLevel(index, 'bonusPercentage', parseFloat(e.target.value) || 0)}
                        InputProps={{
                          endAdornment: <InputAdornment position="end">%</InputAdornment>,
                        }}
                        inputProps={{ step: 0.01, min: 0, max: 100 }}
                        size="small"
                      />
                    </Grid2>
                    
                    <Grid2 size=\{\{ xs: {12, md: 2.4}}\}>
                      <TextField
                        fullWidth
                        label="–ü—Ä–µ–º–∏—è"
                        type="number"
                        value={level.bonus}
                        onChange={(e) => updatePerformanceLevel(index, 'bonus', parseFloat(e.target.value) || 0)}
                        InputProps={{
                          endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                        }}
                        size="small"
                      />
                    </Grid2>
                    
                    <Grid2 size=\{\{ xs: {12, md: 2.4}}\}>
                      <TextField
                        fullWidth
                        label="–û–∫–ª–∞–¥"
                        type="number"
                        value={level.salary}
                        onChange={(e) => updatePerformanceLevel(index, 'salary', parseFloat(e.target.value) || 0)}
                        InputProps={{
                          endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                        }}
                        size="small"
                      />
                    </Grid2>
                    
                    <Grid2 size=\{\{ xs: {12, md: 2.4}}\}>
                      <TextField
                        fullWidth
                        label="–í—Å–µ–≥–æ –ó–ü"
                        type="number"
                        value={level.totalSalary}
                        InputProps={{
                          endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                          readOnly: true,
                        }}
                        disabled
                        size="small"
                        sx={{
                          '& .MuiInputBase-input': {
                            fontWeight: 'bold',
                            color: '#006657',
                          }
                        }}
                      />
                    </Grid2>
                  </Grid2>
                </Paper>
              ))}
              
              {errors.performanceLevels && (
                <Typography color="error" variant="body2">
                  {errors.performanceLevels}
                </Typography>
              )}
            </Grid2>

            <Grid2 size=\{\{ xs: {12}}\}>
              <Typography variant="h6" color="primary" gutterBottom>
                üìä –î–∏–∞–ø–∞–∑–æ–Ω –≤—ã—Ä—É—á–∫–∏
              </Typography>
            </Grid2>

            <Grid2 size=\{\{ xs: {12, md: 6}}\}>
              <TextField
                fullWidth
                label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞"
                type="number"
                value={formData.minRevenue}
                onChange={handleChange('minRevenue')}
                error={!!errors.minRevenue}
                helperText={errors.minRevenue}
                InputProps={{
                  endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                }}
                required
              />
            </Grid2>

            <Grid2 size=\{\{ xs: {12, md: 6}}\}>
              <TextField
                fullWidth
                label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞"
                type="number"
                value={formData.maxRevenue}
                onChange={handleChange('maxRevenue')}
                error={!!errors.maxRevenue}
                helperText={errors.maxRevenue}
                InputProps={{
                  endAdornment: <InputAdornment position="end">‚ÇΩ</InputAdornment>,
                }}
                required
              />
            </Grid2>

            <Grid2 size=\{\{ xs: {12}}\}>
              <Typography variant="h6" color="primary" gutterBottom>
                üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </Typography>
            </Grid2>

            <Grid2 size=\{\{ xs: {12, md: 4}}\}>
              <TextField
                fullWidth
                label="–¶–≤–µ—Ç"
                type="color"
                value={formData.color}
                onChange={handleChange('color')}
                InputLabelProps={{ shrink: true }}
              />
            </Grid2>

            <Grid2 size=\{\{ xs: {12, md: 4}}\}>
              <TextField
                fullWidth
                label="–ü–æ—Ä—è–¥–æ–∫"
                type="number"
                value={formData.order}
                onChange={handleChange('order')}
                inputProps={{ min: 0 }}
              />
            </Grid2>

            {grade && (
              <Grid2 size=\{\{ xs: {12, md: 4}}\}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={formData.isActive}
                      onChange={(e) =>
                        setFormData(prev => ({ ...prev, isActive: e.target.checked }))
                      }
                    />
                  }
                  label="–ê–∫—Ç–∏–≤–Ω—ã–π"
                />
              </Grid2>
            )}

            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
            <Grid2 size=\{\{ xs: {12}}\}>
              <Box
                sx={{
                  p: 2,
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 2,
                  bgcolor: 'background.paper',
                }}
              >
                <Typography variant="subtitle1" gutterBottom>
                  üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  <strong>{formData.name}</strong> ‚Ä¢ 
                  –ü–ª–∞–Ω: {formatNumber(formData.plan)} ‚ÇΩ ‚Ä¢ 
                  –î–∏–∞–ø–∞–∑–æ–Ω: {formatNumber(formData.minRevenue)} - {formatNumber(formData.maxRevenue)} ‚ÇΩ
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                  <strong>–ü–æ–¥—É—Ä–æ–≤–Ω–∏:</strong> {formData.performanceLevels.map(level => 
                    `${level.completionPercentage}% (${formatNumber(level.totalSalary)} ‚ÇΩ)`
                  ).join(' ‚Ä¢ ')}
                </Typography>
              </Box>
            </Grid2>
          </Grid2>

          {Object.keys(errors).length > 0 && (
            <Alert severity="error" sx={{ mt: 2 }}>
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ
            </Alert>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose} disabled={loading}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            type="submit" 
            variant="contained" 
            disabled={loading}
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (grade ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default GradeForm;




