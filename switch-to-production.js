const fs = require('fs');
const path = require('path');

console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º schema.prisma –Ω–∞ production –≤–µ—Ä—Å–∏—é
const backendDir = path.join(__dirname, 'backend');
const prismaDir = path.join(backendDir, 'prisma');

const devSchema = path.join(prismaDir, 'schema.prisma');
const prodSchema = path.join(prismaDir, 'schema.production.prisma');
const devBackup = path.join(prismaDir, 'schema.development.prisma');

try {
  // –°–æ–∑–¥–∞–µ–º backup —Ç–µ–∫—É—â–µ–π dev —Å—Ö–µ–º—ã
  if (fs.existsSync(devSchema)) {
    fs.copyFileSync(devSchema, devBackup);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω backup dev —Å—Ö–µ–º—ã');
  }

  // –ö–æ–ø–∏—Ä—É–µ–º production —Å—Ö–µ–º—É
  if (fs.existsSync(prodSchema)) {
    fs.copyFileSync(prodSchema, devSchema);
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ production —Å—Ö–µ–º–∞');
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º .env —Ñ–∞–π–ª
  const devEnv = path.join(backendDir, '.env');
  const prodEnv = path.join(backendDir, '.env.production');
  const envBackup = path.join(backendDir, '.env.development');

  if (fs.existsSync(devEnv)) {
    fs.copyFileSync(devEnv, envBackup);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω backup dev .env');
  }

  if (fs.existsSync(prodEnv)) {
    fs.copyFileSync(prodEnv, devEnv);
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω production .env');
  }

  console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DATABASE_URL –≤ Vercel environment variables');
  console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ JWT_SECRET –≤ Vercel environment variables');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx prisma generate');
  console.log('4. –î–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Vercel');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
}