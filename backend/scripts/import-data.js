const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function importData(filename = null) {
  try {
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    const exportsDir = path.join(__dirname, '..', 'exports');
    let filepath;

    if (filename) {
      filepath = path.join(exportsDir, filename);
    } else {
      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç
      const files = fs.readdirSync(exportsDir)
        .filter(f => f.startsWith('data-export-') && f.endsWith('.json'))
        .sort()
        .reverse();
      
      if (files.length === 0) {
        console.error('‚ùå –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ exports/');
        console.log('üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: npm run export-data');
        process.exit(1);
      }
      
      filepath = path.join(exportsDir, files[0]);
    }

    if (!fs.existsSync(filepath)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filepath}`);
      process.exit(1);
    }

    console.log(`üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: ${filepath}`);

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const rawData = fs.readFileSync(filepath, 'utf8');
    const exportData = JSON.parse(rawData);
    const { data } = exportData;

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.users?.length || 0}`);
    console.log(`üéñÔ∏è –ì—Ä–µ–π–¥—ã: ${data.grades?.length || 0}`);
    console.log(`üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${data.participants?.length || 0}`);
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥—ã: ${data.periods?.length || 0}`);

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–û–ü–ê–°–ù–û! –¢–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å—Ç–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
    const confirmClear = process.env.FORCE_CLEAR === 'true' || process.argv.includes('--force-clear');
    
    if (confirmClear) {
      console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await prisma.gradeTransition.deleteMany();
      await prisma.log.deleteMany();
      await prisma.payment.deleteMany();
      await prisma.periodGrade.deleteMany();
      await prisma.participant.deleteMany();
      await prisma.period.deleteMany();
      await prisma.grade.deleteMany();
      await prisma.user.deleteMany();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    // –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.users && data.users.length > 0) {
      console.log('\\nüë• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      for (const user of data.users) {
        await prisma.user.create({
          data: {
            id: user.id,
            email: user.email,
            password: user.password,
            name: user.name,
            role: user.role,
            createdAt: new Date(user.createdAt),
            updatedAt: new Date(user.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –ò–º–ø–æ—Ä—Ç –≥—Ä–µ–π–¥–æ–≤
    if (data.grades && data.grades.length > 0) {
      console.log('\\nüéñÔ∏è –ò–º–ø–æ—Ä—Ç –≥—Ä–µ–π–¥–æ–≤...');
      for (const grade of data.grades) {
        await prisma.grade.create({
          data: {
            id: grade.id,
            name: grade.name,
            description: grade.description,
            plan: grade.plan,
            minRevenue: grade.minRevenue,
            maxRevenue: grade.maxRevenue,
            performanceLevels: grade.performanceLevels,
            color: grade.color,
            order: grade.order,
            isActive: grade.isActive,
            createdAt: new Date(grade.createdAt),
            updatedAt: new Date(grade.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.grades.length} –≥—Ä–µ–π–¥–æ–≤`);
    }

    // –ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (data.participants && data.participants.length > 0) {
      console.log('\\nüë§ –ò–º–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
      for (const participant of data.participants) {
        await prisma.participant.create({
          data: {
            id: participant.id,
            telegramId: participant.telegramId,
            username: participant.username,
            firstName: participant.firstName,
            lastName: participant.lastName,
            phoneNumber: participant.phoneNumber,
            revenue: participant.revenue,
            isActive: participant.isActive,
            joinedAt: new Date(participant.joinedAt),
            gradeId: participant.gradeId,
            warningStatus: participant.warningStatus,
            warningPeriodsLeft: participant.warningPeriodsLeft,
            lastPeriodRevenue: participant.lastPeriodRevenue,
            lastCompletionPercentage: participant.lastCompletionPercentage,
            userId: participant.userId,
            createdAt: new Date(participant.createdAt),
            updatedAt: new Date(participant.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
    }

    // –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–∏–æ–¥–æ–≤
    if (data.periods && data.periods.length > 0) {
      console.log('\\nüìÖ –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–∏–æ–¥–æ–≤...');
      for (const period of data.periods) {
        await prisma.period.create({
          data: {
            id: period.id,
            name: period.name,
            startDate: new Date(period.startDate),
            endDate: new Date(period.endDate),
            type: period.type,
            status: period.status,
            participantSnapshots: period.participantSnapshots,
            createdAt: new Date(period.createdAt),
            updatedAt: new Date(period.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.periods.length} –ø–µ—Ä–∏–æ–¥–æ–≤`);
    }

    // –ò–º–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π
    if (data.payments && data.payments.length > 0) {
      console.log('\\nüí∞ –ò–º–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π...');
      for (const payment of data.payments) {
        await prisma.payment.create({
          data: {
            id: payment.id,
            participantId: payment.participantId,
            periodId: payment.periodId,
            amount: payment.amount,
            status: payment.status,
            paidAt: payment.paidAt ? new Date(payment.paidAt) : null,
            description: payment.description,
            createdAt: new Date(payment.createdAt),
            updatedAt: new Date(payment.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.payments.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
    }

    // –ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π –ø–µ—Ä–∏–æ–¥-–≥—Ä–µ–π–¥
    if (data.periodGrades && data.periodGrades.length > 0) {
      console.log('\\nüìã –ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π –ø–µ—Ä–∏–æ–¥-–≥—Ä–µ–π–¥...');
      for (const periodGrade of data.periodGrades) {
        await prisma.periodGrade.create({
          data: {
            id: periodGrade.id,
            periodId: periodGrade.periodId,
            gradeId: periodGrade.gradeId,
            amount: periodGrade.amount,
            createdAt: new Date(periodGrade.createdAt),
            updatedAt: new Date(periodGrade.updatedAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.periodGrades.length} —Å–≤—è–∑–µ–π –ø–µ—Ä–∏–æ–¥-–≥—Ä–µ–π–¥`);
    }

    // –ò–º–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
    if (data.logs && data.logs.length > 0) {
      console.log('\\nüìù –ò–º–ø–æ—Ä—Ç –ª–æ–≥–æ–≤...');
      for (const log of data.logs) {
        await prisma.log.create({
          data: {
            id: log.id,
            type: log.type,
            message: log.message,
            details: log.details,
            participantId: log.participantId,
            periodId: log.periodId,
            createdAt: new Date(log.createdAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.logs.length} –ª–æ–≥–æ–≤`);
    }

    // –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≥—Ä–µ–π–¥–æ–≤
    if (data.gradeTransitions && data.gradeTransitions.length > 0) {
      console.log('\\nüîÑ –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≥—Ä–µ–π–¥–æ–≤...');
      for (const transition of data.gradeTransitions) {
        await prisma.gradeTransition.create({
          data: {
            id: transition.id,
            participantId: transition.participantId,
            fromGradeId: transition.fromGradeId,
            toGradeId: transition.toGradeId,
            periodId: transition.periodId,
            transitionType: transition.transitionType,
            reason: transition.reason,
            completionPercentage: transition.completionPercentage,
            revenue: transition.revenue,
            details: transition.details,
            createdAt: new Date(transition.createdAt),
          },
        });
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.gradeTransitions.length} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≥—Ä–µ–π–¥–æ–≤`);
    }

    console.log('\\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${exportData.metadata.exportDate}`);
    console.log(`üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${exportData.metadata.source}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
const filename = process.argv[2];
importData(filename);